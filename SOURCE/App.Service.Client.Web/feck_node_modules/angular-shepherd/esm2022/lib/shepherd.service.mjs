import { Injectable } from '@angular/core';
import Shepherd from 'shepherd.js';
import { elementIsHidden } from './utils/dom';
import { makeButton } from './utils/buttons';
import * as i0 from "@angular/core";
export class ShepherdService {
    constructor() {
        this.confirmCancel = false;
        this.confirmCancelMessage = null;
        this.defaultStepOptions = {};
        this.errorTitle = null;
        this.isActive = false;
        this.keyboardNavigation = true;
        this.messageForUser = null;
        this.modal = false;
        this.requiredElements = [];
        this.tourName = undefined;
        this.tourObject = null;
        this.exitOnEsc = true;
    }
    /**
     * Get the tour object and call back
     */
    back() {
        this.tourObject.back();
    }
    /**
     * Cancel the tour
     */
    cancel() {
        this.tourObject.cancel();
    }
    /**
     * Complete the tour
     */
    complete() {
        this.tourObject.complete();
    }
    /**
     * Hides the current step
     */
    hide() {
        this.tourObject.hide();
    }
    /**
     * Advance the tour to the next step
     */
    next() {
        this.tourObject.next();
    }
    /**
     * Show a specific step, by passing its id
     * @param id The id of the step you want to show
     */
    show(id) {
        this.tourObject.show(id);
    }
    /**
     * Start the tour
     */
    start() {
        this.isActive = true;
        this.tourObject.start();
    }
    /**
     * This function is called when a tour is completed or cancelled to initiate cleanup.
     * @param completeOrCancel 'complete' or 'cancel'
     */
    onTourFinish(completeOrCancel) {
        this.isActive = false;
    }
    /**
     * Take a set of steps and create a tour object based on the current configuration
     * @param steps An array of steps
     */
    addSteps(steps) {
        this._initialize();
        const tour = this.tourObject;
        // Return nothing if there are no steps
        if (!steps || !Array.isArray(steps) || steps.length === 0) {
            return;
        }
        if (!this.requiredElementsPresent()) {
            tour.addStep({
                buttons: [{
                        text: 'Exit',
                        action: tour.cancel
                    }],
                id: 'error',
                title: this.errorTitle,
                text: [this.messageForUser]
            });
            return;
        }
        steps.forEach((step) => {
            if (step.buttons) {
                step.buttons = step.buttons.map(makeButton.bind(this), this);
            }
            tour.addStep(step);
        });
    }
    /**
     * Observes the array of requiredElements, which are the elements that must be present at the start of the tour,
     * and determines if they exist, and are visible, if either is false, it will stop the tour from executing.
     */
    requiredElementsPresent() {
        let allElementsPresent = true;
        /* istanbul ignore next: also can't test this due to things attached to root blowing up tests */
        this.requiredElements.forEach((element) => {
            const selectedElement = document.querySelector(element.selector);
            if (allElementsPresent && (!selectedElement || elementIsHidden(selectedElement))) {
                allElementsPresent = false;
                this.errorTitle = element.title;
                this.messageForUser = element.message;
            }
        });
        return allElementsPresent;
    }
    /**
     * Initializes the tour, creates a new Shepherd.Tour. sets options, and binds events
     */
    _initialize() {
        const tourObject = new Shepherd.Tour({
            confirmCancel: this.confirmCancel,
            confirmCancelMessage: this.confirmCancelMessage,
            defaultStepOptions: this.defaultStepOptions,
            keyboardNavigation: this.keyboardNavigation,
            tourName: this.tourName,
            useModalOverlay: this.modal,
            exitOnEsc: this.exitOnEsc
        });
        tourObject.on('complete', this.onTourFinish.bind(this, 'complete'));
        tourObject.on('cancel', this.onTourFinish.bind(this, 'cancel'));
        this.tourObject = tourObject;
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: ShepherdService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: ShepherdService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: ShepherdService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlcGhlcmQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3NoZXBoZXJkL3NyYy9saWIvc2hlcGhlcmQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sUUFBUSxNQUFNLGFBQWEsQ0FBQztBQUNuQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFLN0MsTUFBTSxPQUFPLGVBQWU7SUFjMUI7UUFiQSxrQkFBYSxHQUFHLEtBQUssQ0FBQztRQUN0Qix5QkFBb0IsR0FBVyxJQUFJLENBQUM7UUFDcEMsdUJBQWtCLEdBQXFCLEVBQUUsQ0FBQztRQUMxQyxlQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsdUJBQWtCLEdBQUcsSUFBSSxDQUFDO1FBQzFCLG1CQUFjLEdBQVcsSUFBSSxDQUFDO1FBQzlCLFVBQUssR0FBRyxLQUFLLENBQUM7UUFDZCxxQkFBZ0IsR0FBRyxFQUFFLENBQUM7UUFDdEIsYUFBUSxHQUFHLFNBQVMsQ0FBQztRQUNyQixlQUFVLEdBQWtCLElBQUksQ0FBQztRQUNqQyxjQUFTLEdBQUcsSUFBSSxDQUFDO0lBR2pCLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUk7UUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU07UUFDSixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRDs7T0FFRztJQUNILFFBQVE7UUFDTixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUk7UUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUk7UUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLENBQUMsRUFBbUI7UUFDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSztRQUNILElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVEOzs7T0FHRztJQUNILFlBQVksQ0FBQyxnQkFBd0I7UUFDbkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILFFBQVEsQ0FBQyxLQUE4QjtRQUNyQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUU3Qix1Q0FBdUM7UUFDdkMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDekQsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1gsT0FBTyxFQUFFLENBQUM7d0JBQ1IsSUFBSSxFQUFFLE1BQU07d0JBQ1osTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO3FCQUNwQixDQUFDO2dCQUNGLEVBQUUsRUFBRSxPQUFPO2dCQUNYLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVTtnQkFDdEIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQzthQUM1QixDQUFDLENBQUM7WUFDSCxPQUFPO1NBQ1I7UUFFRCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDckIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDOUQ7WUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNLLHVCQUF1QjtRQUM3QixJQUFJLGtCQUFrQixHQUFHLElBQUksQ0FBQztRQUU5QixnR0FBZ0c7UUFDaEcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3hDLE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRWpFLElBQUksa0JBQWtCLElBQUksQ0FBQyxDQUFDLGVBQWUsSUFBSSxlQUFlLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRTtnQkFDaEYsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO2dCQUMzQixJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQzthQUN2QztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxrQkFBa0IsQ0FBQztJQUM1QixDQUFDO0lBRUQ7O09BRUc7SUFDSyxXQUFXO1FBQ2pCLE1BQU0sVUFBVSxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQztZQUNuQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWE7WUFDakMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLG9CQUFvQjtZQUMvQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCO1lBQzNDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxrQkFBa0I7WUFDM0MsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLGVBQWUsRUFBRSxJQUFJLENBQUMsS0FBSztZQUMzQixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7U0FDMUIsQ0FBQyxDQUFDO1FBRUgsVUFBVSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDcEUsVUFBVSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFaEUsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDL0IsQ0FBQztpSUF0SlUsZUFBZTtxSUFBZixlQUFlLGNBRmQsTUFBTTs7MkZBRVAsZUFBZTtrQkFIM0IsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgU2hlcGhlcmQgZnJvbSAnc2hlcGhlcmQuanMnO1xuaW1wb3J0IHsgZWxlbWVudElzSGlkZGVuIH0gZnJvbSAnLi91dGlscy9kb20nO1xuaW1wb3J0IHsgbWFrZUJ1dHRvbiB9IGZyb20gJy4vdXRpbHMvYnV0dG9ucyc7XG5pbXBvcnQgU3RlcCBmcm9tICdzaGVwaGVyZC5qcy9zcmMvdHlwZXMvc3RlcCc7XG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBTaGVwaGVyZFNlcnZpY2Uge1xuICBjb25maXJtQ2FuY2VsID0gZmFsc2U7XG4gIGNvbmZpcm1DYW5jZWxNZXNzYWdlOiBzdHJpbmcgPSBudWxsO1xuICBkZWZhdWx0U3RlcE9wdGlvbnM6IFN0ZXAuU3RlcE9wdGlvbnMgPSB7fTtcbiAgZXJyb3JUaXRsZSA9IG51bGw7XG4gIGlzQWN0aXZlID0gZmFsc2U7XG4gIGtleWJvYXJkTmF2aWdhdGlvbiA9IHRydWU7XG4gIG1lc3NhZ2VGb3JVc2VyOiBzdHJpbmcgPSBudWxsO1xuICBtb2RhbCA9IGZhbHNlO1xuICByZXF1aXJlZEVsZW1lbnRzID0gW107XG4gIHRvdXJOYW1lID0gdW5kZWZpbmVkO1xuICB0b3VyT2JqZWN0OiBTaGVwaGVyZC5Ub3VyID0gbnVsbDtcbiAgZXhpdE9uRXNjID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB0b3VyIG9iamVjdCBhbmQgY2FsbCBiYWNrXG4gICAqL1xuICBiYWNrKCkge1xuICAgIHRoaXMudG91ck9iamVjdC5iYWNrKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VsIHRoZSB0b3VyXG4gICAqL1xuICBjYW5jZWwoKSB7XG4gICAgdGhpcy50b3VyT2JqZWN0LmNhbmNlbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXBsZXRlIHRoZSB0b3VyXG4gICAqL1xuICBjb21wbGV0ZSgpIHtcbiAgICB0aGlzLnRvdXJPYmplY3QuY29tcGxldGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlcyB0aGUgY3VycmVudCBzdGVwXG4gICAqL1xuICBoaWRlKCkge1xuICAgIHRoaXMudG91ck9iamVjdC5oaWRlKCk7XG4gIH1cblxuICAvKipcbiAgICogQWR2YW5jZSB0aGUgdG91ciB0byB0aGUgbmV4dCBzdGVwXG4gICAqL1xuICBuZXh0KCkge1xuICAgIHRoaXMudG91ck9iamVjdC5uZXh0KCk7XG4gIH1cblxuICAvKipcbiAgICogU2hvdyBhIHNwZWNpZmljIHN0ZXAsIGJ5IHBhc3NpbmcgaXRzIGlkXG4gICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIHN0ZXAgeW91IHdhbnQgdG8gc2hvd1xuICAgKi9cbiAgc2hvdyhpZDogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgdGhpcy50b3VyT2JqZWN0LnNob3coaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IHRoZSB0b3VyXG4gICAqL1xuICBzdGFydCgpIHtcbiAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICB0aGlzLnRvdXJPYmplY3Quc3RhcnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuIGEgdG91ciBpcyBjb21wbGV0ZWQgb3IgY2FuY2VsbGVkIHRvIGluaXRpYXRlIGNsZWFudXAuXG4gICAqIEBwYXJhbSBjb21wbGV0ZU9yQ2FuY2VsICdjb21wbGV0ZScgb3IgJ2NhbmNlbCdcbiAgICovXG4gIG9uVG91ckZpbmlzaChjb21wbGV0ZU9yQ2FuY2VsOiBzdHJpbmcpIHtcbiAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVGFrZSBhIHNldCBvZiBzdGVwcyBhbmQgY3JlYXRlIGEgdG91ciBvYmplY3QgYmFzZWQgb24gdGhlIGN1cnJlbnQgY29uZmlndXJhdGlvblxuICAgKiBAcGFyYW0gc3RlcHMgQW4gYXJyYXkgb2Ygc3RlcHNcbiAgICovXG4gIGFkZFN0ZXBzKHN0ZXBzOiBBcnJheTxTdGVwLlN0ZXBPcHRpb25zPikge1xuICAgIHRoaXMuX2luaXRpYWxpemUoKTtcbiAgICBjb25zdCB0b3VyID0gdGhpcy50b3VyT2JqZWN0O1xuXG4gICAgLy8gUmV0dXJuIG5vdGhpbmcgaWYgdGhlcmUgYXJlIG5vIHN0ZXBzXG4gICAgaWYgKCFzdGVwcyB8fCAhQXJyYXkuaXNBcnJheShzdGVwcykgfHwgc3RlcHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnJlcXVpcmVkRWxlbWVudHNQcmVzZW50KCkpIHtcbiAgICAgIHRvdXIuYWRkU3RlcCh7XG4gICAgICAgIGJ1dHRvbnM6IFt7XG4gICAgICAgICAgdGV4dDogJ0V4aXQnLFxuICAgICAgICAgIGFjdGlvbjogdG91ci5jYW5jZWxcbiAgICAgICAgfV0sXG4gICAgICAgIGlkOiAnZXJyb3InLFxuICAgICAgICB0aXRsZTogdGhpcy5lcnJvclRpdGxlLFxuICAgICAgICB0ZXh0OiBbdGhpcy5tZXNzYWdlRm9yVXNlcl1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0ZXBzLmZvckVhY2goKHN0ZXApID0+IHtcbiAgICAgIGlmIChzdGVwLmJ1dHRvbnMpIHtcbiAgICAgICAgc3RlcC5idXR0b25zID0gc3RlcC5idXR0b25zLm1hcChtYWtlQnV0dG9uLmJpbmQodGhpcyksIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB0b3VyLmFkZFN0ZXAoc3RlcCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogT2JzZXJ2ZXMgdGhlIGFycmF5IG9mIHJlcXVpcmVkRWxlbWVudHMsIHdoaWNoIGFyZSB0aGUgZWxlbWVudHMgdGhhdCBtdXN0IGJlIHByZXNlbnQgYXQgdGhlIHN0YXJ0IG9mIHRoZSB0b3VyLFxuICAgKiBhbmQgZGV0ZXJtaW5lcyBpZiB0aGV5IGV4aXN0LCBhbmQgYXJlIHZpc2libGUsIGlmIGVpdGhlciBpcyBmYWxzZSwgaXQgd2lsbCBzdG9wIHRoZSB0b3VyIGZyb20gZXhlY3V0aW5nLlxuICAgKi9cbiAgcHJpdmF0ZSByZXF1aXJlZEVsZW1lbnRzUHJlc2VudCgpIHtcbiAgICBsZXQgYWxsRWxlbWVudHNQcmVzZW50ID0gdHJ1ZTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBhbHNvIGNhbid0IHRlc3QgdGhpcyBkdWUgdG8gdGhpbmdzIGF0dGFjaGVkIHRvIHJvb3QgYmxvd2luZyB1cCB0ZXN0cyAqL1xuICAgIHRoaXMucmVxdWlyZWRFbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBjb25zdCBzZWxlY3RlZEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnQuc2VsZWN0b3IpO1xuXG4gICAgICBpZiAoYWxsRWxlbWVudHNQcmVzZW50ICYmICghc2VsZWN0ZWRFbGVtZW50IHx8IGVsZW1lbnRJc0hpZGRlbihzZWxlY3RlZEVsZW1lbnQpKSkge1xuICAgICAgICBhbGxFbGVtZW50c1ByZXNlbnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lcnJvclRpdGxlID0gZWxlbWVudC50aXRsZTtcbiAgICAgICAgdGhpcy5tZXNzYWdlRm9yVXNlciA9IGVsZW1lbnQubWVzc2FnZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhbGxFbGVtZW50c1ByZXNlbnQ7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIHRvdXIsIGNyZWF0ZXMgYSBuZXcgU2hlcGhlcmQuVG91ci4gc2V0cyBvcHRpb25zLCBhbmQgYmluZHMgZXZlbnRzXG4gICAqL1xuICBwcml2YXRlIF9pbml0aWFsaXplKCkge1xuICAgIGNvbnN0IHRvdXJPYmplY3QgPSBuZXcgU2hlcGhlcmQuVG91cih7XG4gICAgICBjb25maXJtQ2FuY2VsOiB0aGlzLmNvbmZpcm1DYW5jZWwsXG4gICAgICBjb25maXJtQ2FuY2VsTWVzc2FnZTogdGhpcy5jb25maXJtQ2FuY2VsTWVzc2FnZSxcbiAgICAgIGRlZmF1bHRTdGVwT3B0aW9uczogdGhpcy5kZWZhdWx0U3RlcE9wdGlvbnMsXG4gICAgICBrZXlib2FyZE5hdmlnYXRpb246IHRoaXMua2V5Ym9hcmROYXZpZ2F0aW9uLFxuICAgICAgdG91ck5hbWU6IHRoaXMudG91ck5hbWUsXG4gICAgICB1c2VNb2RhbE92ZXJsYXk6IHRoaXMubW9kYWwsXG4gICAgICBleGl0T25Fc2M6IHRoaXMuZXhpdE9uRXNjXG4gICAgfSk7XG5cbiAgICB0b3VyT2JqZWN0Lm9uKCdjb21wbGV0ZScsIHRoaXMub25Ub3VyRmluaXNoLmJpbmQodGhpcywgJ2NvbXBsZXRlJykpO1xuICAgIHRvdXJPYmplY3Qub24oJ2NhbmNlbCcsIHRoaXMub25Ub3VyRmluaXNoLmJpbmQodGhpcywgJ2NhbmNlbCcpKTtcblxuICAgIHRoaXMudG91ck9iamVjdCA9IHRvdXJPYmplY3Q7XG4gIH1cbn1cbiJdfQ==