import { ChangeDetectorRef, EventEmitter, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { UiSwitchModuleConfig } from './ui-switch.config';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class UiSwitchComponent implements ControlValueAccessor, OnDestroy {
    private cdr;
    private _checked;
    private _disabled;
    private _reverse;
    private _loading;
    private _beforeChange;
    size: any;
    color: any;
    switchOffColor: any;
    switchColor: any;
    defaultBgColor: any;
    defaultBoColor: any;
    checkedLabel: any;
    uncheckedLabel: any;
    checkedTextColor: any;
    uncheckedTextColor: any;
    beforeChange: Observable<boolean>;
    ariaLabel: string;
    set checked(v: boolean);
    get checked(): boolean;
    set disabled(v: boolean);
    get disabled(): boolean;
    set reverse(v: boolean);
    get reverse(): boolean;
    set loading(v: boolean);
    get loading(): boolean;
    /**
     * Emits changed value
     */
    change: EventEmitter<boolean>;
    /**
     * Emits DOM event
     */
    changeEvent: EventEmitter<MouseEvent>;
    /**
     * Emits changed value
     */
    valueChange: EventEmitter<boolean>;
    constructor(config: UiSwitchModuleConfig, cdr: ChangeDetectorRef);
    getColor(flag?: string): any;
    onClick(event: MouseEvent): void;
    onToggle(event: MouseEvent): void;
    writeValue(obj: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    private onTouchedCallback;
    private onChangeCallback;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<UiSwitchComponent, [{ optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<UiSwitchComponent, "ui-switch", never, { "size": { "alias": "size"; "required": false; }; "color": { "alias": "color"; "required": false; }; "switchOffColor": { "alias": "switchOffColor"; "required": false; }; "switchColor": { "alias": "switchColor"; "required": false; }; "defaultBgColor": { "alias": "defaultBgColor"; "required": false; }; "defaultBoColor": { "alias": "defaultBoColor"; "required": false; }; "checkedLabel": { "alias": "checkedLabel"; "required": false; }; "uncheckedLabel": { "alias": "uncheckedLabel"; "required": false; }; "checkedTextColor": { "alias": "checkedTextColor"; "required": false; }; "uncheckedTextColor": { "alias": "uncheckedTextColor"; "required": false; }; "beforeChange": { "alias": "beforeChange"; "required": false; }; "ariaLabel": { "alias": "ariaLabel"; "required": false; }; "checked": { "alias": "checked"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "reverse": { "alias": "reverse"; "required": false; }; "loading": { "alias": "loading"; "required": false; }; }, { "change": "change"; "changeEvent": "changeEvent"; "valueChange": "valueChange"; }, never, ["*"], false, never>;
}
